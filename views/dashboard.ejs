<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title><%= sessionId %> - WaBot</title>
    <link rel="icon" type="image/png" href="/images/logo.png">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
	<link rel="stylesheet" href="/css/styles.css">
    <script>
        const sessionId = '<%= sessionId %>';
        const socket = io();

        socket.on('connect', () => {
            socket.emit('joinRoom', sessionId);
        });

		socket.on('newMessage', (message) => {
			const messagesContainer = document.getElementById('messages');
			const newMessageElement = document.createElement('div');
            const messageBody = marked.parse(message.body);

			newMessageElement.classList.add('message', 'flex', 'flex-col', 'mb-2', 'rounded-md', message.type === 'incoming' ? 'items-start' : 'items-end');

			newMessageElement.innerHTML = `
                <div class="${message.type === 'incoming' ? 'bg-blue-400' : 'bg-green-400'} rounded-md text-white shadow">
                    <div class="px-2 py-1">
                        <strong class="block font-semibold">~${message.type === 'incoming' ? message.from : 'ðŸ¤– Bot'}</strong>
                    </div>
                    <div class="${message.type === 'incoming' ? 'bg-gray-100 text-gray-700' : 'bg-green-100 text-green-900'} p-2 rounded-b-md max-w-xl">
                        ${message.mediaUrl && typeof message.mediaUrl === 'string' ? `
                            <div class="mt-2">
                                <img src="${message.mediaUrl.startsWith('http') ? message.mediaUrl : '/images/' + message.mediaUrl.split('/').pop()}" alt="Media" class="h-[200px] object-cover rounded-md">
                            </div>
                        ` : ''}
                        <div class="markdown-body">
                            ${messageBody}
                        </div>
                    </div>
                </div>`;

			messagesContainer.appendChild(newMessageElement);
			messagesContainer.scrollTop = messagesContainer.scrollHeight;
		});

		function renderMarkdown() {
			document.querySelectorAll('.markdown-body').forEach((element) => {
				const markdownText = element.textContent.trim();
				const formattedText = markdownText.replace(/\n/g, '\n\n');
				element.innerHTML = marked.parse(formattedText);
			});
		}


        document.addEventListener('DOMContentLoaded', renderMarkdown);
    </script>
</head>
<body class="font-sans bg-gray-50 flex flex-col">
	<%- include('partials/header') %>
	<div>
		<main class="min h-screen pt-20 p-4 flex flex-col md:flex-row gap-6">
			<%- include('partials/sidebar') %>
			<div id="messages" class="h-full w-full overflow-y-auto border border-gray-200 rounded-lg bg-white p-4">
				<% messages.forEach(msg => { %>
					<div class="message <%= msg.type === 'incoming' ? 'items-start justify-start' : 'items-end justify-end' %> w-full flex flex-col rounded-md mb-2">
						<div class="<%= msg.type === 'incoming' ? 'bg-blue-400' : 'bg-green-400' %> rounded-md text-white shadow">
							<div class="px-2 py-1">
								<strong class="block font-semibold">~<%= msg.type === 'incoming' ? msg.from : 'ðŸ¤– Bot' %></strong>
							</div>
							<div class="<%= msg.type === 'incoming' ? 'bg-gray-100 text-gray-700' : 'bg-green-100 text-green-900' %> p-2 rounded-b-md max-w-xl">
								<% if (msg.mediaUrl && typeof msg.mediaUrl === 'string') { %>
									<div class="mt-2">
										<img src="<%= msg.mediaUrl.startsWith('http') ? msg.mediaUrl : '/images/' + msg.mediaUrl.split('/').pop() %>" alt="Media" class="h-[200px] object-cover 2-auto rounded-md">
									</div>
								<% } %>
								<div class="markdown-body">
                                    <%= msg.body %>
                                </div>
							</div>
						</div>
					</div>
				<% }) %>
			</div>
		</main>
	</div>
	
    <script src="/js/script.js"></script>
	<script>
		const cleanMessage = message.body.trim();
		renderMarkdown();
	</script>
</body>
</html>
